-- In the context of this bot, a module is pretty much anything the bot does that isn't a command.
-- For example: checking messages for advertising, decreasing warning levels.

local fs = require("fs")
local json = require("json")
local utils = require("miscUtils")

local moduleHandler = {}
moduleHandler.modules = {}
moduleHandler.modulePaths = {}
moduleHandler.sortedModuleNames = {}

<<<<<<< HEAD:libs/moduleHandler.lua
moduleHandler.load = function()
	for _,filename in ipairs(fs.readdirSync("modules")) do
		if filename:match("%.lua$") then
			local mod = require("../modules/"..filename)
			moduleHandler.modules[mod.name] = mod
=======
local function scanModules(dir)
	for filename, filetype in fs.scandirSync(dir) do
		if filetype=="directory" then
			scanModules(dir.."/"..filename)
		elseif filename:match("%.lua$") then
			local mod = require("./"..dir.."/"..filename)
			local event = moduleHandler.eventFromPath(dir)
			event[mod.name] = mod
			moduleHandler.modulePaths[mod.name] = dir:gsub("^modules%/?","")
>>>>>>> change/module-folders:moduleHandler.lua
			table.insert(moduleHandler.sortedModuleNames, mod.name)
		end
	end
	return t
end

moduleHandler.eventFromPath = function(path)
	local pathSplit = path:gsub("^modules%/?",""):split("/")
	local event = moduleHandler.modules
	for _, eventName in ipairs(pathSplit) do
		if not event[eventName] then
			event[eventName] = {}
		end
		event = event[eventName]
		assert(type(event)=="table", "Module "..eventName.." has the same name as an event in path "..path)
	end
	return event
end

moduleHandler.getModule = function()

moduleHandler.load = function()
	scanModules("modules")
	table.sort(moduleHandler.sortedModuleNames)
end

moduleHandler.enable = function(modString, message, guildSettings, conn)
	if not moduleHandler.modules[modString]:onEnable(message, guildSettings, conn) then
		return false
	end
	guildSettings.disabled_modules[modString] = nil
	local encodedSetting = json.encode(guildSettings.disabled_modules)
	local stmt = conn:prepare("UPDATE guild_settings SET disabled_modules = ? WHERE guild_id = ?;")
	stmt:reset():bind(encodedSetting, message.guild.id):step()
	stmt:close()
	return true
end

moduleHandler.disable = function(modString, message, guildSettings, conn)
	if not moduleHandler.modules[modString]:onDisable(message, guildSettings, conn) then
		return false
	end
	guildSettings.disabled_modules[modString] = true
	local encodedSetting = json.encode(guildSettings.disabled_modules)
	local stmt = conn:prepare("UPDATE guild_settings SET disabled_modules = ? WHERE guild_id = ?;")
	stmt:reset():bind(encodedSetting, message.guild.id):step()
	stmt:close()
	return true
end

moduleHandler.doModules = function(event, guildSettings, ...)
	for _, mod in pairs(event) do
		if not guildSettings.disabled_modules[mod.name] then
			mod:run(guildSettings, ...)
		end
	end
end

return moduleHandler